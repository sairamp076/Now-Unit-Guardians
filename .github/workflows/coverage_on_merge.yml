name: Full Jest Coverage
 
on:
  push:
    branches:
      - main
 
jobs:
  coverage-report:
    runs-on: ubuntu-latest
 
    permissions:
      contents: read
 
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
 
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
 
      - name: Run Jest with coverage and save output
        run: |
          echo "üß™ Running Jest with coverage..."
          mkdir -p temp
          npx jest --coverage | tee ./temp/jest-output.txt
 
      - name: Parse Jest Coverage Table Summary (Node.js with raw links)
        run: |
          node <<'EOF'
          const fs = require('fs');
          const text = fs.readFileSync('./temp/jest-output.txt', 'utf-8');
          const lines = text.split('\n');
 
          const start = lines.findIndex(line => line.includes('File')) + 1;
          const end = lines.findIndex((line, i) => i > start && line.trim().startsWith('-------------'));
 
          const repo = process.env.GITHUB_REPOSITORY;
          const rawBase = `https://raw.githubusercontent.com/${repo}/refs/heads/main`;
 
          const data = [];
 
          for (let i = start; i < end; i++) {
            const line = lines[i].trim();
            if (!line || line.startsWith('---')) continue;
 
            const parts = line.split('|').map(part => part.trim());
            if (parts.length < 6) continue;
 
            const file = parts[0];
            const baseFileName = file.replace(/^.*[\\/]/, '');
            const testFileName = baseFileName.replace(/\.js$/, '.spec.js');
            data.push({
              file,
              source_url: `${rawBase}/src/${file}`,
              spec_url: `${rawBase}/__tests__/${testFileName}`,
              coverage: {
                statements: parts[1],
                branches: parts[2],
                functions: parts[3],
                lines: parts[4],
                uncovered_lines: parts[5] || ''
              }
            });
          }
 
          fs.writeFileSync('./temp/coverage-table-summary.json', JSON.stringify(data, null, 2));
          EOF
 
      - name: Parse Jest Summary & Test Results (Reliable Bash + jq)
        run: |
          echo "üì¶ Extracting test summary..."
          OUTPUT=$(cat ./temp/jest-output.txt)
 
          TESTS=$(echo "$OUTPUT" | grep "^Tests:" | sed 's/^Tests:[[:space:]]*//')
          TIME=$(echo "$OUTPUT" | grep "^Time:" | sed 's/^Time:[[:space:]]*//')
 
          echo "üß™ Extracting test results..."
          TEST_RESULTS_JSON="["
          IS_FIRST=1
          CURRENT_FILE=""
          CURRENT_ERROR=""
          IN_FAILURE=0
 
          while IFS= read -r line; do
            if [[ "$line" =~ ^PASS ]]; then
              FILE=$(echo "$line" | awk '{print $2}')
              ENTRY=$(jq -n --arg file "$FILE" --arg status "PASS" '{file: $file, status: $status}')
              [[ $IS_FIRST -eq 0 ]] && TEST_RESULTS_JSON+=","
              TEST_RESULTS_JSON+="${ENTRY}"
              IS_FIRST=0
            elif [[ "$line" =~ ^FAIL ]]; then
              FILE=$(echo "$line" | awk '{print $2}')
              CURRENT_FILE="$FILE"
              CURRENT_ERROR=""
              IN_FAILURE=1
            elif [[ $IN_FAILURE -eq 1 ]]; then
              if [[ -z "$line" || "$line" =~ ^(PASS|FAIL) ]]; then
                ENTRY=$(jq -n --arg file "$CURRENT_FILE" --arg status "FAIL" --arg error "$CURRENT_ERROR" '{file: $file, status: $status, error: $error}')
                [[ $IS_FIRST -eq 0 ]] && TEST_RESULTS_JSON+=","
                TEST_RESULTS_JSON+="${ENTRY}"
                IN_FAILURE=0
              else
                CURRENT_ERROR="${CURRENT_ERROR}\n${line}"
              fi
            fi
          done <<< "$OUTPUT"
 
          # Add last fail block if any
          if [[ $IN_FAILURE -eq 1 ]]; then
            ENTRY=$(jq -n --arg file "$CURRENT_FILE" --arg status "FAIL" --arg error "$CURRENT_ERROR" '{file: $file, status: $status, error: $error}')
            [[ $IS_FIRST -eq 0 ]] && TEST_RESULTS_JSON+=","
            TEST_RESULTS_JSON+="${ENTRY}"
          fi
 
          TEST_RESULTS_JSON="${TEST_RESULTS_JSON}]"
          echo "$TEST_RESULTS_JSON" > ./temp/test-results.json
 
          # Fallback for empty file coverage file
          if [[ ! -s ./temp/coverage-table-summary.json ]]; then
            echo "[]" > ./temp/coverage-table-summary.json
          fi
 
      - name: Call ServiceNow Coverage API
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          echo "üì§ Preparing payload for ServiceNow..."
 
          FINAL_PAYLOAD=$(jq -n \
            --arg repo_name "$REPO_NAME" \
            --argjson file_coverage "$(cat ./temp/coverage-table-summary.json)" \
            '{repo_name: $repo_name, file_coverage: $file_coverage}')
 
          echo "$FINAL_PAYLOAD" > ./temp/final-payload.json
          echo "Payload:"
          cat ./temp/final-payload.json
 
          echo "üì¨ Sending data to ServiceNow..."
          RESPONSE=$(curl -s -w "\n%{http_code}" --location 'https://hackai.service-now.com/api/snc/candy_content/file_coverage' \
            --header 'Content-Type: application/json' \
            --data @./temp/final-payload.json)
 
          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)
 
          echo "Status Code: $STATUS"
          echo "Response Body:"
          echo "$BODY"
 
          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 201 ]]; then
            echo "‚ùå Failed to POST data to ServiceNow"
            exit 1
          fi
